#def nand a, b {
    #set c = a and b;
    c not;
}
#def or a, b {
    #set a = a not;
    #set b = b not;
    a nand b
}
#def xor a, b {
    #set c = a or b;
    #set d = a nand b;
    c and d
}
#def adder a {
    #set valA = a[0;]
    #set valB = a[1;]
    #set valC = a[2;]

    #set c = valA xor valB;
    #set d = valA and valB;
    #set e = valC and c;

    #set sum = c xor valC;
    #set carry = e or d;
    [sum; carry;]
}
#def four_bit_adder a {
    #set valA = a[0;]
    #set valB = a[1;]
    #set valC = a[2;]
    #set valD = a[3;]

    #set valE = a[4;]
    #set valF = a[5;]
    #set valG = a[6;]
    #set valH = a[7;]

    #set carryIn = a[8;]

    #set addarr = [valD; valH; carryIn;]
    #set add = addarr adder;
    #set replyA = add[0;]
    #set carryIn = add[1;]

    #set addarr = [valC; valG; carryIn;]
    #set add = addarr adder;
    #set replyB = add[0;]
    #set carryIn = add[1;]

    #set addarr = [valB; valF; carryIn;]
    #set add = addarr adder;
    #set replyC = add[0;]
    #set carryIn = add[1;]

    #set addarr = [valA; valE; carryIn;]
    #set add = addarr adder;
    #set replyD = add[0;]
    #set carryIn = add[1;]

    [replyD; replyC; replyB; replyA; carryIn;]
}


#def alu a {
    #set valA = a[0;]
    #set valB = a[1;]
    #set valC = a[2;]
    #set valD = a[3;]

    #set valE = a[4;]
    #set valF = a[5;]
    #set valG = a[6;]
    #set valH = a[7;]

    #set subtract = a[8;]

    #set valE = valE xor subtract;
    #set valF = valF xor subtract;
    #set valG = valG xor subtract;
    #set valH = valH xor subtract;

    #set four_bit_input = [valA; valB; valC; valD; valE; valF; valG; valH; subtract;]
    #set four_bit_output = four_bit_input four_bit_adder;

    #set negativeEight = four_bit_output[0;]
    #set valB = four_bit_output[1;]
    #set valC = four_bit_output[2;]
    #set valD = four_bit_output[3;]

    #set carry = four_bit_output[4;]

    #set notVA = negativeEight not;
    #set notVB = valB not;
    #set notVC = valC not;
    #set notVD = valD not;

    #set andA = notVA and notVB;
    #set andB = andA and notVC;
    #set isZero = andB and notVD;

    [
        negativeEight; valB; valC; valD;
        carry; negativeEight; isZero;
    ]

}

#set b = [
    0; 0; 0; 1;
    0; 0; 0; 1;
    1;
]
#set a = b alu;
#pnl a;